<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BiscuitOS</title>
    <description>The Blog for BiscuitOS</description>
    <link>kongsong.me/</link>
    <atom:link href="kongsong.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 Jul 2018 19:41:31 +0800</pubDate>
    <lastBuildDate>Sun, 01 Jul 2018 19:41:31 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>BiscuitOS 的第一步</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;BiscuitOS 是一个基于古老版本 Linux 的发行版，其主要目的就是给开发者提供一个简单，
  易用，有趣的 Linux 调试环境，让开发者专注于代码调试，减少繁琐的移植和编译问题。
  截止目前，BiscuitOS 已经支持 Linux 0.11 到 Linux 1.0.1 各版本内核。 BiscuitOS 
  支持内核列表：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;linux 0.11&lt;/li&gt;
  &lt;li&gt;linux 0.12&lt;/li&gt;
  &lt;li&gt;linux 0.95&lt;/li&gt;
  &lt;li&gt;linux 0.96&lt;/li&gt;
  &lt;li&gt;linux 0.97&lt;/li&gt;
  &lt;li&gt;linux 0.98&lt;/li&gt;
  &lt;li&gt;linux 0.99&lt;/li&gt;
  &lt;li&gt;linux 1.0.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;feature&quot;&gt;Feature&lt;/h2&gt;

&lt;p&gt;BiscuitOS 作为一个 Legacy Linux 发行版，完整还原了早期 Linux 内核，并提供基础的 
  Rootfs，使其基于 qemu 可以在现代 PC 机上运行并调试。BiscuitOS  是一款专注于开发
  者使用的发行版，其以下特点符合多数开发者需求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BiscuitOS 是一款基于 Intel X86 的操作系统，其运行在 qemu 模拟的 X86 环境中，
对于无硬件环境的开发者较友好。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 的内核支持 Kbuild 编译环境，开发者可以只用 &lt;code class=&quot;highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; 进行自定义
内核编译，这将大大减少编译带来的问题。对于想研究内核 Kconfig 语法及编译过程的开
发者比较友好。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 的内核支持自定义链接过程，可通过修改链接脚本控制整个链接过程，对于想研
究内核链接过程的开发者比较友好。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 提供了多版本的内核，对于想研究某个子系统的发展历史的开发者，可以结合原
理对每行代码进行在线调试。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 提供了 debug call 机制，开发者之用编写自己的代码，使用 debug call 
机制，就能在内核不同阶段运行你的代码，这个功能利于开发者快速调试自己的代码&lt;/li&gt;
  &lt;li&gt;BiscuitOS 提供了一套完成的调试机制，从上电开始，开发者就可以使用基于 gdb 的调试
工具，逐行进行在线调试。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 提供了一套 POSIX system call 的 demo code，开发者可以通过 demo code 
从用户空间到内核空间调试每一个系统调用。BiscuitOS 也提供了一套自定义的 LibC 库，
开发者可以自行创建符合 POSIX 的系统调用。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 提供了一套通过中断机制，开发者可以通过这套机制使用并调试触发每种中断
   到方法。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 包含了一套精简到 VFS 机制，并支持 minix, ext, ext2, msdos 等 9 种文件
系统， BiscuitOS 也提供了制作这 9 种 Rootfs 的方法。以便开发者了解文件系统，VFS 
和 Rootfs 之间的联系。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 包含了一套精简到 VM 机制，并支持逻辑地址，虚拟地址，线性地址和物理地
址之间的转换代码，同时支持 kmalloc，vmalloc，page 等内存分配器。为开发者提供了
一套 demo code 以便完整理解 linux 内存机制的运作原理。&lt;/li&gt;
  &lt;li&gt;BiscuitOS 还提供了调度，驱动等子系统的 demo code，开发者可以通过调试 demo code，
可以深入理解每种机制的运作原理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;biscuitos-&quot;&gt;BiscuitOS 的使用&lt;/h2&gt;

&lt;p&gt;在使用 BiscuitOS 之前，开发者需要准备一套 Linux PC，最好是 Ubuntu 16.04 ，本教程
  以 Ubuntu16.04-64Bit 为例，其他 Linux 发行版照旧&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装必要的开发工具&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qemu&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gcc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib32z1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib32z1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libncurses5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;获得源码.安装完必要的开发工具之后，开发者可以从 github 上获得源码，使用以下命令
下载到特定的目录：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BiscuitOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;git&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;配置和编译内核.第一编译内核，请使用如下命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defconfig&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;运行内核.在编译完内核之后，开发者在 Linux PC 上直接运行内核，使用如下命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;自定义配置内核.开发当然可以根据自己的需求去裁剪和添加内核功能，可以使用如下
命令进行：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuconfig&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 12:43:30 +0800</pubDate>
        <link>kongsong.me/blog/HomePage/</link>
        <guid isPermaLink="true">kongsong.me/blog/HomePage/</guid>
        
        <category>CN</category>
        
        <category>Kernel</category>
        
        <category>Linux</category>
        
        
        <category>All</category>
        
      </item>
    
  </channel>
</rss>
